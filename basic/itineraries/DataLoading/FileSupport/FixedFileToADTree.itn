<?xml version="1.0" encoding="UTF-8"?>

<toolkit xmlns:xsi="http://www.w3.org/2001/XMLSchema-Instance" xsi:noNamespaceSchemaLocation="itinerary.xsd">
  <itinerary resman="rO0ABXNyAB1uY3NhLmQyay5jb3JlLlJlc291cmNlTWFuYWdlcgAAAAAAAAABAgAAeHIAE2phdmEu
dXRpbC5IYXNodGFibGUTuw8lIUrkuAMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAA
AAAIdwgAAAAFAAAABXQAEENyZWF0ZSBhbiBBRFRyZWVzcgAbbmNzYS5kMmsuY29yZS5SZXNvdXJj
ZUVudHJ5AAAAAAAAAAECAAJMAAxjYWNoZWRPYmplY3R0ABJMamF2YS9sYW5nL09iamVjdDtMAA9v
YmplY3RDbGFzc05hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHB0ADVuY3NhLmQyay5tb2R1bGVz
LmNvcmUuaW8uZmlsZS5pbnB1dC5QYXJzZUZpbGVUb0FEVHJlZXQAE1BhcnNlIEZpbGUgVG8gVGFi
bGVzcQB+AARwdAA0bmNzYS5kMmsubW9kdWxlcy5jb3JlLmlvLmZpbGUuaW5wdXQuUGFyc2VGaWxl
VG9UYWJsZXQAHENyZWF0ZSBEZWxpbWl0ZWQgRmlsZSBQYXJzZXJzcQB+AARwdABAbmNzYS5kMmsu
bW9kdWxlcy5jb3JlLmlvLmZpbGUuaW5wdXQuQ3JlYXRlRGVsaW1pdGVkUGFyc2VyRnJvbVVSTHQA
GkNyZWF0ZSBGaXhlZC1Gb3JtYXQgUGFyc2Vyc3EAfgAEcHQAPG5jc2EuZDJrLm1vZHVsZXMuY29y
ZS5pby5maWxlLmlucHV0LkNyZWF0ZUZpeGVkUGFyc2VyRnJvbVVSTHQADElucHV0IDIgVVJMc3Nx
AH4ABHB0ADJuY3NhLmQyay5tb2R1bGVzLmNvcmUuaW8uZmlsZS5pbnB1dC5JbnB1dDJGaWxlVVJM
c3g=" label="FixedFileToADTree.itn">
    <annotation><![CDATA[<p>
      Overview: This module creates a parser for a fixed-format file.  The 
      contents of the file are read into an ADTree index structure.
    </p>
    <p>
      Detailed Description: Given a file name and a &quot;header&quot; Table of metadata 
      describing the file's format, this module creates a parser for that 
      file. This parser can then be passed to ParseFileToTable, for example, 
      to read the file into a Table.The table of metadata has five columns 
      with the following labels:LABEL, TYPE, START, STOP, LENGTH not 
      necessarily in this order.The START column needs to be always present. 
      Only one of theSTOP or LENGTH columns need to be present.The STOP column 
      will be ignored if LENGTH column is present.Columns start from 1 not 
      from zero. Start and stop columns are inclusive,for a column with one 
      character the start and stop will be equal.
    </p>
    <p>
      Given a parser, reads the data, counting how many times each attribute 
      value occurs.All these counts are stored into an ADTree structure. See 
      B. Anderson and A. Moore in &quot;ADTrees for fast counting and for fast 
      learning of association rules&quot;.The purpose of the tree is to answer 
      questions like &quot; how many instances with x, y and z are in the dataset?&quot; 
      in constant time. It cannot answer these questions for continuous data 
      An ExampleTable that contains the column types and labels of the input 
      data is also created.
    </p>
    <p>
      Data Type Restrictions: The specified file must be in fixed format.  
      Designed to work with nominal data, cannot handle real data.In practice 
      the tree is not useful for real data.  The ADTree is in fact an index 
      structure for a datacube.If there are a lot of attributes and they have 
      many values the structurewill easily run out of memory. Optimizations 
      have been made so that only thefirst branch of the tree is stored in 
      memory and the rest are built as needed when the counts are retrived
    </p>
    <p>
      
    </p>
    <p>
      Data Handling: This module does not destroy or modify its input data.  
    </p>]]></annotation>
    <module alias="Create Fixed-Format Parser" classname="ncsa.d2k.modules.core.io.file.input.CreateFixedParserFromURL" xloc="376" yloc="89">
      <input index="0" classname="ncsa.d2k.modules.core.io.proxy.DataObjectProxy"/>
      <input index="1" classname="ncsa.d2k.modules.core.datatype.table.Table"/>
      <output index="0" classname="ncsa.d2k.modules.core.io.file.input.FixedFileParserFromURL">
        <destination alias="Create an ADTree" index="0"/>
      </output>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
    </module>
    <module alias="Input 2 URLs" classname="ncsa.d2k.modules.core.io.file.input.Input2FileURLs" xloc="36" yloc="113">
      <output index="0" classname="ncsa.d2k.modules.core.io.proxy.DataObjectProxy">
        <destination alias="Create Delimited File Parser" index="0"/>
      </output>
      <output index="1" classname="ncsa.d2k.modules.core.io.proxy.DataObjectProxy">
        <destination alias="Create Fixed-Format Parser" index="0"/>
      </output>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAACAAAAAAAAAAA="/>
      <property name="userName1" value=""/>
      <property name="userName0" value=""/>
    </module>
    <module alias="Create Delimited File Parser" classname="ncsa.d2k.modules.core.io.file.input.CreateDelimitedParserFromURL" xloc="112" yloc="17">
      <input index="0" classname="ncsa.d2k.modules.core.io.proxy.DataObjectProxy"/>
      <output index="0" classname="ncsa.d2k.modules.core.io.file.input.DelimitedFileParserFromURL">
        <destination alias="Parse File To Table" index="0"/>
      </output>
      <property name="typesRow" value="1"/>
      <property name="labelsRow" value="0"/>
      <property name="hasSpecDelim" value="false"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
      <property name="hasTypes" value="true"/>
      <property name="hasLabels" value="true"/>
    </module>
    <module alias="Parse File To Table" classname="ncsa.d2k.modules.core.io.file.input.ParseFileToTable" xloc="302" yloc="18">
      <input index="0" classname="ncsa.d2k.modules.core.io.file.input.FlatFileParser"/>
      <input index="1" classname="ncsa.d2k.modules.core.datatype.table.TableFactory"/>
      <output index="0" classname="ncsa.d2k.modules.core.datatype.table.MutableTable">
        <destination alias="Create Fixed-Format Parser" index="1"/>
      </output>
      <property name="useBlanks" value="true"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
    </module>
    <module alias="Create an ADTree" classname="ncsa.d2k.modules.core.io.file.input.ParseFileToADTree" xloc="570" yloc="90">
      <input index="0" classname="ncsa.d2k.modules.core.io.file.input.FlatFileParser"/>
      <output index="0" classname="ncsa.d2k.modules.core.datatype.ADTree"/>
      <output index="1" classname="ncsa.d2k.modules.core.datatype.table.ExampleTable"/>
      <property name="debug" value="false"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAACAAAAAAAAAAA="/>
    </module>
  </itinerary>
</toolkit>
