<?xml version="1.0" encoding="UTF-8"?>

<toolkit xmlns:xsi="http://www.w3.org/2001/XMLSchema-Instance" xsi:noNamespaceSchemaLocation="itinerary.xsd">
  <itinerary resman="rO0ABXNyAB1uY3NhLmQyay5jb3JlLlJlc291cmNlTWFuYWdlcgAAAAAAAAABAgAAeHIAE2phdmEu
dXRpbC5IYXNodGFibGUTuw8lIUrkuAMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAA
AAAIdwgAAAALAAAAA3QAE1BhcnNlIEZpbGUgVG8gVGFibGVzcgAbbmNzYS5kMmsuY29yZS5SZXNv
dXJjZUVudHJ5AAAAAAAAAAECAAJMAAxjYWNoZWRPYmplY3R0ABJMamF2YS9sYW5nL09iamVjdDtM
AA9vYmplY3RDbGFzc05hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHB0ADRuY3NhLmQyay5tb2R1
bGVzLmNvcmUuaW8uZmlsZS5pbnB1dC5QYXJzZUZpbGVUb1RhYmxldAAPSW5wdXQgRmlsZSBOYW1l
c3EAfgAEcHQAMm5jc2EuZDJrLm1vZHVsZXMuY29yZS5pby5maWxlLmlucHV0LklucHV0MUZpbGVO
YW1ldAAcQ3JlYXRlIERlbGltaXRlZCBGaWxlIFBhcnNlcnNxAH4ABHB0ADluY3NhLmQyay5tb2R1
bGVzLmNvcmUuaW8uZmlsZS5pbnB1dC5DcmVhdGVEZWxpbWl0ZWRQYXJzZXJ4" label="DelimitedFileToTable.itn">
    <annotation><![CDATA[<p>
      <b>Delimited File to Table </b>
    </p>
    <p>
      This itinerary loads a data set that has a common delimiter character 
      into a table in memory. D2K uses various implementations of the Table 
      structure to organize the data that is being mined. A common source of 
      delimited files is a spreadsheet that saves data in .csv (comma 
      separated value) format.
    </p>
    <p>
      Typically this itinerary would be included as a <i>nested itinerary </i>i
      n a larger itinerary that works with the table that is created. The use 
      of nested itineraries can eliminate repetitive module placement and 
      connection operations when collections of modules are frequently used 
      together.  To nest this itinerary in another, drag it from the Itinerary 
      Resource Panel and drop it in the Workspace. Press and hold the &quot;Ctrl&quot; 
      key and double click the mouse on the nested itinerary icon in the 
      Workspace to access the properties of the modules listed below.  
    </p>
    <p>
      <b>Modules with Properties</b>
    </p>
    <p>
      The following modules have properties that may need to be adjusted. The 
      properties can be changed by double clicking on the given module.
    </p>
    <p>
      1 - <i><b>Input File Name</b></i>
    </p>
    <p>
      This module is used to specify the data set. The file is identified via 
      the File Name property.
    </p>
    <p>
      2 - <i><b>Create Delimited File Parser</b></i>
    </p>
    <p>
      This module creates a parser for the specified file. The properties of 
      the module can be used to optionally specify a row containing attribute 
      (column) labels, a row containing attribute (column) data types, and the 
      delimiter character separating the fields in the data set. The module 
      attempts to identify the data types and delimiter automatically if none 
      are specified explicitly.  Column labels are generated by the module if 
      the data set being loaded does not have a row containing labels.
    </p>
    <p>
      3 - <i><b>Parse File To Table</b></i>
    </p>
    <p>
      This module loads the data from a file to a Table in memory. A property 
      of this module controls whether blanks should be interpreted as missing 
      values. 
    </p>
    <p>
      <b>Execution</b>
    </p>
    <p>
      Execute the itinerary by clicking on the &quot;Run&quot; button. 
    </p>
    <p>
      This itinerary by itself does not produce any noticeable results when it 
      is executed.  To view the Table that is created, attach a Table Viewer 
      module to the output of the Parse File To Table module prior to 
      execution.
    </p>]]></annotation>
    <module alias="Create Delimited File Parser" classname="ncsa.d2k.modules.core.io.file.input.CreateDelimitedParser" xloc="130" yloc="18">
      <input index="0" classname="java.lang.String"/>
      <output index="0" classname="ncsa.d2k.modules.core.io.file.input.DelimitedFileParser">
        <destination alias="Parse File To Table" index="0"/>
      </output>
      <property name="typesRow" value="1"/>
      <property name="hasSpecDelim" value="false"/>
      <property name="labelsRow" value="0"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
      <property name="hasTypes" value="true"/>
      <property name="hasLabels" value="true"/>
    </module>
    <module alias="Parse File To Table" classname="ncsa.d2k.modules.core.io.file.input.ParseFileToTable" xloc="326" yloc="18">
      <input index="0" classname="ncsa.d2k.modules.core.io.file.input.FlatFileParser"/>
      <output index="0" classname="ncsa.d2k.modules.core.datatype.table.MutableTable"/>
      <property name="useBlanks" value="true"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
    </module>
    <module alias="Input File Name" classname="ncsa.d2k.modules.core.io.file.input.Input1FileName" xloc="23" yloc="18">
      <output index="0" classname="java.lang.String">
        <destination alias="Create Delimited File Parser" index="0"/>
      </output>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
      <property name="fileName" value=""/>
      <property name="fileFilterExtension" value=""/>
    </module>
  </itinerary>
</toolkit>
