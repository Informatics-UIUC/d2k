<?xml version="1.0" encoding="UTF-8"?>

<toolkit xmlns:xsi="http://www.w3.org/2001/XMLSchema-Instance" xsi:noNamespaceSchemaLocation="itinerary.xsd">
  <itinerary resman="rO0ABXNyAB1uY3NhLmQyay5jb3JlLlJlc291cmNlTWFuYWdlcgAAAAAAAAABAgAAeHIAE2phdmEu
dXRpbC5IYXNodGFibGUTuw8lIUrkuAMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAA
AAAIdwgAAAALAAAAA3QAF0NyZWF0ZSBBUkZGIEZpbGUgUGFyc2Vyc3IAG25jc2EuZDJrLmNvcmUu
UmVzb3VyY2VFbnRyeQAAAAAAAAABAgACTAAMY2FjaGVkT2JqZWN0dAASTGphdmEvbGFuZy9PYmpl
Y3Q7TAAPb2JqZWN0Q2xhc3NOYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7eHBwdAA0bmNzYS5kMmsu
bW9kdWxlcy5jb3JlLmlvLmZpbGUuaW5wdXQuQ3JlYXRlQVJGRlBhcnNlcnQAD0lucHV0IEZpbGUg
TmFtZXNxAH4ABHB0ADJuY3NhLmQyay5tb2R1bGVzLmNvcmUuaW8uZmlsZS5pbnB1dC5JbnB1dDFG
aWxlTmFtZXQAEENyZWF0ZSBhbiBBRFRyZWVzcQB+AARwdAA1bmNzYS5kMmsubW9kdWxlcy5jb3Jl
LmlvLmZpbGUuaW5wdXQuUGFyc2VGaWxlVG9BRFRyZWV4" label="ARFFToADTree.itn">
    <annotation><![CDATA[<p>
      Overview: Creates an ARFF File Parser for the specified file and reads 
      the contents into an ADTree.
    </p>
    <p>
      DetailedDescription: This creates an ARFF File Parser that will read 
      data from the specified ARFF file. An ARFF (Attribute-Relation File 
      Format) file is an ASCII file that describes a list of instances sharing 
      a set of attributes. ARFF files were developed by the Machine Learning 
      Project at the Department of Computer Science of the University of 
      Waikota for use with the Weka machine learning software.
    </p>
    <p>
      Given a parser, reads the data, counting how many times each attribute 
      value occurs.All these counts are stored into an ADTree structure. See 
      B. Anderson and A. Moore in &quot;ADTrees for fast counting and for fast 
      learning of association rules&quot;.The purpose of the tree is to answer 
      questions like &quot; how many instances with x, y and z are in the dataset?&quot; 
      in constant time. It cannot answer these questions for continuous data 
      An ExampleTable that contains the column types and labels of the input 
      data is also created.
    </p>
    <p>
      Limitations: The module is designed to read valid ARFF files, not to 
      validate correctness. Because of this, the parser performs only a 
      minimal amount of data checking. For example, it does not verify that 
      the data instances contain acceptable attribute values. The module does 
      not handle the sparse data representation introduced in recent versions 
      of the ARFF format.
    </p>
    <p>
      Designed to work with nominal data, cannot handle real data.In practice 
      the tree is not useful for real data.
    </p>
    <p>
      The ADTree is in fact an index structure for a datacube.If there are a 
      lot of attributes and they have many values the structurewill easily run 
      out of memory. Optimizations have been made so that only thefirst branch 
      of the tree is stored in memory and the rest are built as needed when 
      the counts are retrived
    </p>
    <p>
      References:
    </p>
    <p>
      The Weka Project: http://www.cs.waikato.ac.nz/~ml/weka
    </p>
    <p>
      The ARFF Format: http://www.cs.waikato.ac.nz/~ml/weka/arff.html
    </p>]]></annotation>
    <module alias="Create an ADTree" classname="ncsa.d2k.modules.core.io.file.input.ParseFileToADTree" xloc="330" yloc="18">
      <input index="0" classname="ncsa.d2k.modules.core.io.file.input.FlatFileParser"/>
      <output index="0" classname="ncsa.d2k.modules.core.datatype.ADTree"/>
      <output index="1" classname="ncsa.d2k.modules.core.datatype.table.ExampleTable"/>
      <property name="debug" value="false"/>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAACAAAAAAAAAAA="/>
    </module>
    <module alias="Input File Name" classname="ncsa.d2k.modules.core.io.file.input.Input1FileName" xloc="23" yloc="18">
      <output index="0" classname="java.lang.String">
        <destination alias="Create ARFF File Parser" index="0"/>
      </output>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
      <property name="fileName" value=""/>
      <property name="fileFilterExtension" value=""/>
    </module>
    <module alias="Create ARFF File Parser" classname="ncsa.d2k.modules.core.io.file.input.CreateARFFParser" xloc="145" yloc="18">
      <input index="0" classname="java.lang.String"/>
      <output index="0" classname="ncsa.d2k.modules.core.io.file.input.ARFFFileParser">
        <destination alias="Create an ADTree" index="0"/>
      </output>
      <property name="outputCounts" binaryValue="rO0ABXVyAAJbSU26YCZ26rKlAgAAeHAAAAABAAAAAA=="/>
    </module>
  </itinerary>
</toolkit>
