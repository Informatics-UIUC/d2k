/*
 * $Header$
 *
 * ===================================================================
 *
 * D2K-Workflow
 * Copyright (c) 1997,2006 THE BOARD OF TRUSTEES OF THE UNIVERSITY OF
 * ILLINOIS. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License v2.0
 * as published by the Free Software Foundation and with the required
 * interpretation regarding derivative works as described below.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License v2.0 for more details.
 *
 * This program and the accompanying materials are made available
 * under the terms of the GNU General Public License v2.0 (GPL v2.0)
 * which accompanies this distribution and is available at
 * http://www.gnu.org/copyleft/gpl.html (or via mail from the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.), with the special and mandatory
 * interpretation that software only using the documented public
 * Application Program Interfaces (APIs) of D2K-Workflow are not
 * considered derivative works under the terms of the GPL v2.0.
 * Specifically, software only calling the D2K-Workflow Itinerary
 * execution and workflow module APIs are not derivative works.
 * Further, the incorporation of published APIs of other
 * independently developed components into D2K Workflow code
 * allowing it to use those separately developed components does not
 * make those components a derivative work of D2K-Workflow.
 * (Examples of such independently developed components include for
 * example, external databases or metadata and provenance stores).
 *
 * Note: A non-GPL commercially licensed version of contributions
 * from the UNIVERSITY OF ILLINOIS may be available from the
 * designated commercial licensee RiverGlass, Inc. located at
 * (www.riverglassinc.com)
 * ===================================================================
 *
 */
package ncsa.d2k.modules.core.prediction.naivebayes;

import ncsa.d2k.core.modules.ModelModule;
import ncsa.d2k.core.modules.ModelProducerModule;
import ncsa.d2k.modules.core.datatype.table.ExampleTable;
import ncsa.d2k.modules.core.transform.binning.BinTree;


/**
 * <p>Overview: Generates a NaiveBayesModel from the given BinTree. The Naive
 * Bayes Model performs all necessary calculations.</p>
 *
 * <p>Detailed Description: Given a BinTree object that contains counts for each
 * discrete item in the training data set, this module creates a Naive Bayesian
 * learning model. This method is based on Bayes's rule for conditional
 * probability. It \"naively\" assumes independence of the input features.</p>
 *
 * <p>Data Type Restrictions: This model can only use nominal data as the inputs
 * and can only classify one nominal output. The binning procedure will
 * discretize any scalar inputs in the training data, but the output data is not
 * binned and should be nominal. If the output data is binned, visualizations
 * and prediction generated by the created model might be wrong and/or too
 * corrupted to be displayed.</p>
 *
 * <p>Data Handling: The input data is neither modified nor destroyed.</p>
 *
 * <P>Missing Values Handling: Output data should be clean of missing values.
 * </P>
 *
 * <p>Scalability: The module utilizes the counts in the BinTree, and as such
 * does not perform any significant computations.";</p>
 *
 * @author  David Clutter
 * @version $Revision$, $Date$
 */
public class CreateNBModel extends ModelProducerModule {

   //~ Methods *****************************************************************

   /**
    * Performs the main work of the module.
    *
    * @throws Exception if a problem occurs while performing the work of the
    *                   module
    */
   public void doit() throws Exception {
      BinTree bins = (BinTree) pullInput(0);
      ExampleTable et = (ExampleTable) pullInput(1);

      int[] outputs = et.getOutputFeatures();

      // It's got to have outputs.
      if (outputs == null || outputs.length == 0) {
         throw new Exception("Output feature is missing. Please select a output feature.");
      }

      // No missing values in the output columns allowed!
      for (int i = 0; i < outputs.length; i++) {

         if (et.hasMissingValues(outputs[i])) {
            throw new Exception("The data contains missing values in an output column, not supported by Naive Bayes.");
         }
      }

      if (et.isColumnScalar(outputs[0])) {
         throw new Exception("Output feature must be nominal.");
      }

      ModelModule mdl = new NaiveBayesModel(bins, et);
      pushOutput(mdl, 0);
   }


   /**
    * Returns a description of the input at the specified index.
    *
    * @param  i Index of the input for which a description should be returned.
    *
    * @return <code>String</code> describing the input at the specified index.
    */
   public String getInputInfo(int i) {

      switch (i) {

         case 0:
            return "The BinTree which contains counts.";

         case 1:
            return "The ExampleTable with the data in it.";

         default:
            return "No such input";
      }
   }


   /**
    * Returns the name of the input at the specified index.
    *
    * @param  i Index of the input for which a name should be returned.
    *
    * @return <code>String</code> containing the name of the input at the
    *         specified index.
    */
   public String getInputName(int i) {

      switch (i) {

         case 0:
            return "BinTree";

         case 1:
            return "Example Table";

         default:
            return "NO SUCH INPUT!";
      }
   }


   /**
    * Returns an array of <code>String</code> objects each containing the fully
    * qualified Java data type of the input at the corresponding index.
    *
    * @return An array of <code>String</code> objects each containing the fully
    *         qualified Java data type of the input at the corresponding index.
    */
   public String[] getInputTypes() {
      String[] types =
      {
         "ncsa.d2k.modules.core.transform.binning.BinTree",
         "ncsa.d2k.modules.core.datatype.table.ExampleTable"
      };

      return types;
   }


   /**
    * Describes the purpose of the module.
    *
    * @return <code>String</code> describing the purpose of the module.
    */
   public String getModuleInfo() {
      return "<p>Overview: Generates a NaiveBayesModel from the given BinTree.  " +
             "The Naive Bayes Model performs all necessary calculations." +
             "<p>Detailed Description: Given a BinTree object that contains counts for " +
             "each discrete item in the training data set, this module creates a " +
             "Naive Bayesian learning model.  This method is based on Bayes's rule " +
             "for conditional probability.  It \"naively\" assumes independence of " +
             "the input features." +
             "<p>Data Type Restrictions: This model can only use nominal data as the inputs " +
             "and can only classify one nominal output.  The binning procedure will " +
             "discretize any scalar inputs in the training data, but the output data " +
             "is not binned and should be nominal. If the output data is binned, " +
             "visualizations and prediction generated by the created model might be wrong " +
             "and/or too corrupted to be displayed." +
             "<p>Data Handling: The input data is neither modified nor destroyed." +
             "<P>Missing Values Handling: Output data should be clean of missing values." +
             "<p>Scalability: The module utilizes the counts in the BinTree, and " +
             "as such does not perform any significant computations.";
   }


   /**
    * Returns the name of the module that is appropriate for end-user
    * consumption.
    *
    * @return The name of the module.
    */
   public String getModuleName() { return "Create Naive Bayes Model"; }


   /**
    * Returns a description of the output at the specified index.
    *
    * @param  i Index of the output for which a description should be returned.
    *
    * @return <code>String</code> describing the output at the specified index.
    */
   public String getOutputInfo(int i) {

      switch (i) {

         case 0:
            return "A Naive Bayes Model module.";

         default:
            return "No such output";
      }
   }


   /**
    * Returns the name of the output at the specified index.
    *
    * @param  i Index of the output for which a description should be returned.
    *
    * @return <code>String</code> containing the name of the output at the
    *         specified index.
    */
   public String getOutputName(int i) {

      switch (i) {

         case 0:
            return "Naive Bayes Model";

         default:
            return "NO SUCH OUTPUT!";
      }
   }


   /**
    * Returns an array of <code>String</code> objects each containing the fully
    * qualified Java data type of the output at the corresponding index.
    *
    * @return An array of <code>String</code> objects each containing the fully
    *         qualified Java data type of the output at the corresponding index.
    */
   public String[] getOutputTypes() {
      String[] types =
      {
         "ncsa.d2k.modules.core.prediction.naivebayes.NaiveBayesModel"
      };

      return types;
   }
} // end class CreateNBModel
