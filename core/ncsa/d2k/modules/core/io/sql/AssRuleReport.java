package ncsa.d2k.modules.core.io.sql;

/**
 * <p>Title: AssoRuleReport </p>
 * <p>Description: Extract association rules from a cube table generated by ArrayCube algorithm </p>
 * <p>Copyright: Copyright (c) 2002</p>
 * <p>Company: NCSA ALG </p>
 * @author Dora Cai
 * @version 1.0
 */


import ncsa.d2k.core.*;
import ncsa.d2k.core.modules.*;
//import ncsa.d2k.controller.classloading.*;
import ncsa.d2k.core.modules.UserView;
//import ncsa.d2k.io.*;
import ncsa.d2k.userviews.swing.*;
//import ncsa.util.table.*;
import ncsa.gui.Constrain;
import ncsa.gui.JOutlinePanel;
import java.sql.*;
import java.util.*;
import java.util.ArrayList;
import java.text.*;
import javax.swing.table.*;
import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.TableColumnModel;
import javax.swing.JTable;
import oracle.sql.*;
import oracle.jdbc.driver.*;

public class AssRuleReport extends UIModule
        {
  JOptionPane msgBoard = new JOptionPane();
  File file;
  FileWriter fw;
  ConnectionWrapper cw;
  Connection con;
  String cubeTableName;
  double minSupport = 0.1;
  double minConfidence = 0.5;
  int colCnt;
  int totalRow;
  static String NOTHING = "";
  static String DELIMITER = "\t";
  static String ELN = "\n";
  static String NA = "NOAVL";
  // ArrayList for column names
  ArrayList colNames;
  // ArrayList to keep rules represented by item-indexes
  // (the indexes map to the array index of "itemLabels").
  // The items except the last 3 are left handside rules
  // Array to keep all rules
  ArrayList finalRules;
  // ArrayList to keep all rule labels
  ArrayList itemLabels;

  String [] columnHeading;
  GenericTableModel ruleTable;
  JTable ruleList;
  JButton doneBtn;

  public AssRuleReport() {
  }

  public String getInputInfo (int i) {
		switch (i) {
			case 0: return "Each rule consists of a list of distinct rule ids followed by a confidence and a support value. ";
			case 1: return "An array that contains all rule labels (column name = column value).";
			default: return "No such input";
		}
	}

  public String getOutputInfo (int i) {
		switch (i) {
			default: return "No such output";
		}
	}

  public String getModuleInfo () {
		return "<html>  <head>      </head>  <body>    Display the association rules in text format.  </body></html>";
	}

  public String[] getOutputTypes () {
		String[] types = {		};
		return types;
	}

  public String[] getInputTypes () {
		String[] types = {"[[I","java.util.ArrayList"};
		return types;
	}

  protected String[] getFieldNameMapping () {
    return null;
  }

    /**
    Create the UserView object for this module-view combination.
    @return The UserView associated with this module.
  */
  protected UserView createUserView() {
    return new DisplayRuleView();
  }

  public class DisplayRuleView extends JUserInputPane
    implements ActionListener {

    public void setInput(Object input, int index) {
      closeIt();
      removeAll();
      if (index == 0) {
        finalRules = (ArrayList)input;
      }
      else if (index == 1) {
        itemLabels = (ArrayList)input;
      }
      doGUI();
      displayRules();
    }

    public Dimension getPreferredSize() {
      return new Dimension (500, 450);
    }

    public void initView(ViewModule mod) {
      removeAll();
      finalRules = (ArrayList)pullInput(0);
      itemLabels = (ArrayList)pullInput(1);
      doGUI();
      displayRules();
    }

    protected void doGUI() {
      // Panel to hold outline panels
      JPanel displayRulePanel = new JPanel();
      displayRulePanel.setLayout (new GridBagLayout());

      // Outline panel for rules
      String[] columnHeading = {"IF","-->","THEN","S","C"};
      JOutlinePanel ruleInfo = new JOutlinePanel("Association Rules");
      ruleInfo.setLayout (new GridBagLayout());
      ruleTable = new GenericTableModel(finalRules.size(),5,false,columnHeading);
      ruleList = new JTable(ruleTable);
      TableColumnModel colModel = ruleList.getColumnModel();
      colModel.getColumn(0).setPreferredWidth(200);
      colModel.getColumn(1).setPreferredWidth(25);
      colModel.getColumn(2).setPreferredWidth(150);
      colModel.getColumn(3).setPreferredWidth(50);
      colModel.getColumn(4).setPreferredWidth(50);
      JScrollPane tablePane = new JScrollPane(ruleList);
      ruleList.setPreferredScrollableViewportSize (new Dimension(200,350));
      Constrain.setConstraints(ruleInfo, tablePane,
        0,0,1,1,GridBagConstraints.HORIZONTAL, GridBagConstraints.WEST,1,1);

      /* Add the outline panel to displayRulePanel */
      Constrain.setConstraints(displayRulePanel, ruleInfo,
        0,0,3,10,GridBagConstraints.HORIZONTAL,GridBagConstraints.WEST,1,1);
      Constrain.setConstraints(displayRulePanel, doneBtn = new JButton ("Done"),
        1,11,1,1,GridBagConstraints.NONE, GridBagConstraints.EAST,1,1);
      doneBtn.addActionListener(this);

      setLayout (new BorderLayout());
      add(displayRulePanel, BorderLayout.SOUTH);
    }

    public void actionPerformed(ActionEvent e) {
      Object src = e.getSource();

      if (src == doneBtn) {
        closeIt();
        //viewAbort();
      }
    }
  }
  protected void displayRules() {
    String leftRule;
    String tempStr;
    String aLabel;
    // layout of ruleList is: column 1: left handside rule (if rule),
    //                        column 2: symbol "-->",
    //                        column 3: right handside rule (then rule),
    //                        column 4: support,
    //                        column 5: confidence.
    int rowIdx = 0;
    int listSize;
    double aConfidence;
    double minConfidence;
    for (int ruleIdx = 0; ruleIdx < finalRules.size(); ruleIdx++) {
      leftRule = NOTHING;
      listSize = ((ArrayList)finalRules.get(ruleIdx)).size();
      // single item set has the rule size 3: item + support + confident. Don't display single item set
      if (listSize > 3) {
        for (int itemIdx = 0; itemIdx < ((ArrayList)finalRules.get(ruleIdx)).size(); itemIdx++) {
          if (itemIdx>=0 && itemIdx < ((ArrayList)finalRules.get(ruleIdx)).size()-3) {
            tempStr = ((ArrayList)finalRules.get(ruleIdx)).get(itemIdx).toString();
            aLabel = itemLabels.get(Integer.parseInt(tempStr)).toString();
            leftRule = leftRule + aLabel + ",";
          }
          else if (itemIdx == ((ArrayList)finalRules.get(ruleIdx)).size()-3) {
            tempStr = ((ArrayList)finalRules.get(ruleIdx)).get(itemIdx).toString();
            aLabel = itemLabels.get(Integer.parseInt(tempStr)).toString();
            ruleList.setValueAt(aLabel,rowIdx,2);
          }
          else if (itemIdx == ((ArrayList)finalRules.get(ruleIdx)).size()-2) {
            tempStr = ((ArrayList)finalRules.get(ruleIdx)).get(itemIdx).toString();
            ruleList.setValueAt(tempStr,rowIdx,3);
          }
          else if (itemIdx == ((ArrayList)finalRules.get(ruleIdx)).size()-1) {
            tempStr = ((ArrayList)finalRules.get(ruleIdx)).get(itemIdx).toString();
            ruleList.setValueAt(tempStr,rowIdx,4);
          }
        }
        ruleList.setValueAt(leftRule,rowIdx,0);
        ruleList.setValueAt(" -->",rowIdx,1);
        rowIdx ++;
      }
    }
  }

  protected void closeIt() {
    executionManager.moduleDone(this);
  }


	/**
	 * Return the human readable name of the module.
	 * @return the human readable name of the module.
	 */
	public String getModuleName() {
		return "AssRuleReport";
	}

	/**
	 * Return the human readable name of the indexed input.
	 * @param index the index of the input.
	 * @return the human readable name of the indexed input.
	 */
	public String getInputName(int index) {
		switch(index) {
			case 0:
				return "input0";
			case 1:
				return "input1";
			default: return "NO SUCH INPUT!";
		}
	}

	/**
	 * Return the human readable name of the indexed output.
	 * @param index the index of the output.
	 * @return the human readable name of the indexed output.
	 */
	public String getOutputName(int index) {
		switch(index) {
			default: return "NO SUCH OUTPUT!";
		}
	}
}
